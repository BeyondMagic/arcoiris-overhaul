*arcoiris.txt*        Plugin for maintaining colorschemes
*arcoiris*

Author: Iron-E â€“ https://github.com/Iron-E & https://gitlab.com/Iron_E
Web: https://github.com/Iron-E/nvim-arcoiris

|arcoiris| is a plugin for creating and maintaining colorschemes. It can
be configured by cloning the repository and following the README, or
individually used to comprehensively highlight groups with its functions.

==============================================================================
TABLE OF CONTENTS                                                 *arcoiris-toc*

1. Requirements ............ |arcoiris-requirements|
2. Usage ................... |arcoiris-usage|
3. FAQ ..................... |arcoiris-faq|

==============================================================================
REQUIREMENTS                                          *arcoiris-requirements*

- Neovim 0.7+

==============================================================================
USAGE                                                           *arcoiris-usage*

`arcoiris`.group({group_name} [, {link}])                       *arcoiris.group()*

	Convert a pre-existing |highlight-group| into a format that |arcoiris|
	recognizes.

	Note: the |highlight-group| must have been either,
		- |:highlight|ed.
		- |arcoiris.highlight()|ed.

	Parameters: ~
		{group_name}  A `string` which is the |highlight-group| to convert.
		{link}        A `boolean`, if `true`, show |:highlight-link|s rather
		              than the full definition. Requires Neovim 0.9

	Return: ~
		- The {definition} parameter for |arcoiris.highlight()|.

	Example: ~
>
	local arcoiris = require('arcoiris')

	-- get the 'Error' highlight group
	local hl_error = arcoiris.group('Error')

	-- Define 'ErrorMsg' as foreground = background of 'Error'
	arcoiris.highlight('ErrorMsg', {fg=hl_error.bg, bg=BG})
<

`arcoiris`.highlight({group}, {definition})                 *arcoiris.highlight()*

	Highlight some {group} according to its {definition}.

	Note: can be used instead of |nvim_set_hl|.

	Parameters: ~
		{group}       A `string` which is the |highlight-group| to |:highlight|.
		{definition}  A |lua| `table` which follows this format: >
		{
			-- The color for the background, or `nil`
			bg = <color>,

			-- The color for the foreground, or `nil`
			fg = <color>

			-- The |guisp| value, if one is desired.
			[, sp = <color>]

			-- The |highlight-blend| value, if one is desired.
			[, blend = <integer>]

			-- Bold, italic, and more. See |attr-list| for more information.
			[, bold = true|false]
			[, default = true|false]
			[, italic = true|false]
			[, nocombine = true|false]
			[, reverse = true|false]
			[, standout = true|false]
			[, strikethrough = true|false]
			[, undercurl = true|false]
			[, underdashed = true|false]
			[, underdotted = true|false]
			[, underdouble = true|false]
			[, underline = true|false]
		}
<		              Can also be a :|highlight-link|: >
		'GroupName' -- arcoiris style
		{link = 'GroupName'} -- Nvim API style
<

	Return: ~
		- `nil`

	Example: ~
>
		-- Import nvim-arcoiris
		local arcoiris = require('arcoiris')

		-- First, define some colors
		local red = {'#FF0000', 1, 'red'}
		local black = {'#000000', 0, 'black'}
		local white = {'#FFFFFF', 255, 'white'}

		-- Highlight 'Identifier'
		arcoiris.highlight('Identifier', {
			bg = red,
			fg = black,
			bold = true,
		})

		-- Highlight 'Function' conditionally according to background color.
		arcoiris.highlight('Function', {
			bg = black,
			fg = red,
			light = {bg = white},
		})

		-- Link 'Example' to 'Identifier' (both calls are equivalent)
		arcoiris.highlight('Example', 'Identifier')
		arcoiris.highlight('Example', {link = 'Identifier'})

		-- reference specific attributes of another highlight group.
		arcoiris.highlight('AnotherExample', {
			bg = arcoiris.group('SpellBad').bg,
			fg = white,
		})
<

	See also: ~
		|highlight-groups|  Vim builtin highlight groups.
		|group-names|  Vim semantic highlighting groups.
		|treesitter-highlight-groups|  Treesitter semantic highlighting groups.
		|lsp-semantic-highlight|  LSP semantic highlighting groups.

                                                      *arcoiris.highlight_all()*
`arcoiris`.highlight_all({groups})

	Process all of the {groups}, and then |arcoiris.highlight()| them.

	Parameters: ~
		{groups}  A |lua| `table` keyed on the group name, with the value set to
		          the {definition} (see |arcoiris.highlight()|) of the group.

					 A key's value can also be a `function` which accepts one
					 parameter, which can be used to access other groups'
					 {definition}s (see the example).

	Return: ~
		- `nil`

	Example: ~
>
		local red = {'#FF0000', 1, 'red'}
		local black = {'#000000', 0, 'black'}
		local white = {'#FFFFFF', 255, 'white'}

		require('arcoiris').highlight_all {
			-- Any field which can be set to "NONE" doesn't need to be set
			Identifier = {fg = black, bold = true},

			-- If your colorscheme should respond to multiple background
			-- settings, you can do that too:
			Function = {bg = black, fg = red, light = {bg = white}},

			-- Both of these set a link
			Field = 'Identifier',
			Method = {link = 'Function'},

			-- You can also reference specific attributes of another highlight
			-- group, even if it is a link.
			SomethingElse = function(self)
				return {fg = self.Field.fg, bg = self.Method.bg}
			end,
		}
<

	See also: ~
		|arcoiris.highlight()|  For how the {definition} should be formed

                                                 *arcoiris-highlight_terminal()*
`arcoiris`.highlight_terminal({terminal_ansi_colors})

	Override the |terminal| colors with a new table of {terminal_ansi_colors}.

	Parameters: ~
		{terminal_ansi_colors}  The colors to use in the |terminal|.
		                        They are defined according to this
		                        format: >
		{
			[1]  = {'#<hex>', bit_16, '<bit_8>'}, -- overrides 'black'
			[2]  = {'#<hex>', bit_16, '<bit_8>'}, -- overrides 'darkred'
			[3]  = {'#<hex>', bit_16, '<bit_8>'}, -- overrides 'darkgreen'
			[4]  = {'#<hex>', bit_16, '<bit_8>'}, -- overrides 'darkyellow'
			[5]  = {'#<hex>', bit_16, '<bit_8>'}, -- overrides 'darkblue'
			[6]  = {'#<hex>', bit_16, '<bit_8>'}, -- overrides 'darkmagenta'
			[7]  = {'#<hex>', bit_16, '<bit_8>'}, -- overrides 'darkcyan'
			[8]  = {'#<hex>', bit_16, '<bit_8>'}, -- overrides 'gray'
			[9]  = {'#<hex>', bit_16, '<bit_8>'}, -- overrides 'darkgray'
			[10] = {'#<hex>', bit_16, '<bit_8>'}, -- overrides 'red'
			[11] = {'#<hex>', bit_16, '<bit_8>'}, -- overrides 'green'
			[12] = {'#<hex>', bit_16, '<bit_8>'}, -- overrides 'yellow'
			[13] = {'#<hex>', bit_16, '<bit_8>'}, -- overrides 'blue'
			[14] = {'#<hex>', bit_16, '<bit_8>'}, -- overrides 'magenta'
			[15] = {'#<hex>', bit_16, 'bit_8'},   -- overrides 'cyan'
			[16] = {'#<hex>', bit_16, '<bit_8>'}, -- overrides 'white'
		}
<
	Return: ~
		- `nil`

	Example: ~
>
		require('arcoiris'):highlight_terminal {
			[1]  = {'#202020' , 0   , 'black'},
			[2]  = {'#a80000' , 124 , 'darkred'},
			[3]  = {'#50de60' , 83  , 'darkgreen'},
			[4]  = {'#ff8900' , 208 , 'darkyellow'},
			[5]  = {'#7090ff' , 63  , 'darkblue'},
			[6]  = {'#bb0099' , 126 , 'darkmagenta'},
			[7]  = {'#00d0c0' , 38  , 'cyan'},
			[8]  = {'#808080' , 244 , 'gray'},
			[9]  = {'#353535' , 236 , 'darkgrey'},
			[10] = {'#ee4a59' , 196 , 'red'},
			[11] = {'#77ff00' , 72  , 'green'},
			[12] = {'#f0df33' , 220 , 'yellow'},
			[13] = {'#2bff99' , 33  , 'blue'},
			[14] = {'#cf55f0' , 129 , 'magenta'},
			[15] = {'#33efff' , 87  , 'cyan'},
			[16] = {'#c0c0c0' , 251 , 'gray'},
		}
<

	See also: ~
		|terminal-configuration|  Information about how the groups are set.

==============================================================================
FAQ                                                             *arcoiris-faq*

E5108: Error executing lua [string ":lua"]:1: module '<colorscheme>' not found ~

Ensure your colorscheme's base folder is in Neovim's `rtp` before sourcing.

Override the highlighting of one specific highlight group in my init.vim? ~

When using this plugin, it is important to know that you cannot just run `:hi`
on a highlight group and expect that its changes will be retained. You must
attach them to the |ColorScheme| |autocmd-event|, as shown below: >
	packadd nvim-arcoiris
	set termguicolors "optional

	" WRONG! Don't do this.
	hi! Error guifg=#000000 guibg=#FFFFFF

	" Do this instead.
	augroup Highlite
		" You can also use `arcoiris.highlight()` instead of `:hi!`
		autocmd ColorScheme arcoiris hi! Error guifg=#000000 guibg=#FFFFFF
	augroup end

	colorscheme arcoiris
<

Or, in lua: >
	vim.api.nvim_command 'packadd nvim-arcoiris'
	vim.api.nvim_set_option('termguicolors', true)

	-- WARN: don't do this!
	vim.api.nvim_set_hl(0, 'Error', {fg = '#000000', bg = '#FFFFFF'})

	-- NOTE: do this instead
	vim.api.nvim_create_autocmd('ColorScheme', {
	  callback = function()
		 vim.api.nvim_set_hl(0, 'Error', {fg = '#000000', bg = '#FFFFFF'})
		 -- other groups
	  end,
	  group = vim.api.nvim_create_augroup('config', {clear = true}),
	  pattern = 'arcoiris',
	})

	vim.api.nvim_command 'colorscheme arcoiris'
<

Of course, substitute `arcoiris` with the name of your colorscheme.

===============================================================================
 vim:tw=78:noexpandtab:ft=help:norl:
